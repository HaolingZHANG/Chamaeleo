"""
Name: Functional testing for SC

Coder: HaoLing ZHANG (BGI-Research)[V1]

Current Version: 1

Function(s): The reliability of Simple code transformation
"""
import random
import unittest
import Chamaeleo.methods.sc as sc


class TestEncodeDecode(unittest.TestCase):

    def setUp(self):
        random.seed(30)
        self.tool = sc.SC()
        self.tool.mapping_rule = [0, 0, 1, 1]
        self.test_list = [random.randint(0, 1) for _ in range(120)]

    def test_list_to_motif(self):
        dna_motif = self.tool.__list_to_sequence__(self.test_list)
        self.assertEqual(
            dna_motif,
            [
                "G",
                "A",
                "C",
                "T",
                "C",
                "G",
                "G",
                "A",
                "C",
                "G",
                "A",
                "C",
                "A",
                "A",
                "A",
                "T",
                "G",
                "A",
                "T",
                "C",
                "A",
                "T",
                "G",
                "A",
                "G",
                "A",
                "G",
                "T",
                "A",
                "G",
                "T",
                "G",
                "A",
                "A",
                "C",
                "T",
                "A",
                "C",
                "G",
                "T",
                "C",
                "A",
                "T",
                "T",
                "G",
                "T",
                "T",
                "A",
                "C",
                "C",
                "G",
                "T",
                "G",
                "G",
                "G",
                "T",
                "A",
                "A",
                "A",
                "G",
                "T",
                "C",
                "A",
                "G",
                "T",
                "G",
                "T",
                "T",
                "T",
                "T",
                "T",
                "G",
                "G",
                "A",
                "A",
                "G",
                "G",
                "A",
                "A",
                "C",
                "G",
                "C",
                "G",
                "T",
                "C",
                "T",
                "A",
                "A",
                "G",
                "G",
                "T",
                "T",
                "C",
                "A",
                "T",
                "A",
                "T",
                "A",
                "A",
                "T",
                "T",
                "A",
                "C",
                "T",
                "C",
                "G",
                "A",
                "G",
                "T",
                "A",
                "T",
                "G",
                "C",
                "T",
                "T",
                "A",
                "G",
                "T",
                "G",
                "C",
            ],
        )

    def test_motif_to_list(self):
        binary_list = self.tool.__sequence_to_list__(
            [
                "G",
                "A",
                "C",
                "T",
                "C",
                "G",
                "G",
                "A",
                "C",
                "G",
                "A",
                "C",
                "A",
                "A",
                "A",
                "T",
                "G",
                "A",
                "T",
                "C",
                "A",
                "T",
                "G",
                "A",
                "G",
                "A",
                "G",
                "T",
                "A",
                "G",
                "T",
                "G",
                "A",
                "A",
                "C",
                "T",
                "A",
                "C",
                "G",
                "T",
                "C",
                "A",
                "T",
                "T",
                "G",
                "T",
                "T",
                "A",
                "C",
                "C",
                "G",
                "T",
                "G",
                "G",
                "G",
                "T",
                "A",
                "A",
                "A",
                "G",
                "T",
                "C",
                "A",
                "G",
                "T",
                "G",
                "T",
                "T",
                "T",
                "T",
                "T",
                "G",
                "G",
                "A",
                "A",
                "G",
                "G",
                "A",
                "A",
                "C",
                "G",
                "C",
                "G",
                "T",
                "C",
                "T",
                "A",
                "A",
                "G",
                "G",
                "T",
                "T",
                "C",
                "A",
                "T",
                "A",
                "T",
                "A",
                "A",
                "T",
                "T",
                "A",
                "C",
                "T",
                "C",
                "G",
                "A",
                "G",
                "T",
                "A",
                "T",
                "G",
                "C",
                "T",
                "T",
                "A",
                "G",
                "T",
                "G",
                "C",
            ]
        )
        self.assertEqual(binary_list, self.test_list)